{1 O'Closure - API References }

{%

We tried to stay as close as possible to Google Closure structure
* **Same inheritance tree**
* **One module per class or package** (except in case of cyclic dependency between several classes)
* **Same package name** (except for ##Goog.Gdom## (##goog.dom##), ##Goog.Ggraphics## (##goog.graphics##) and ##Goog.Geditor## (##goog.editor##))
* **Constructors have the same name system**

See the <<a_api text="API"| intro >>.

<<webonly |
----
<<div class="twocol1 center"|
== Google Closure ==
{{closure_logo.png| Google Closure}} >>

<<div class="twocol2 center"|
== OClosure ==
{{oclosure_logo.png| OClosure}} >>
>>
Â 

== Structure ==

<<div class="twocol1"|
In Closure, all objects have the same hierarchy form :
<<code | goog.package[.subPackage ...].ClassName>>
>>
<<div class="twocol2"|
In OClosure, the Goog module "packs" the sub modules <<code language="ocaml" | Goog.Package[.Subpackage ...].ClassName>>
Some object are defined in the same module because of cyclic dependencies
 >>

== Constructors ==
<<div class="twocol1"| Constructors have the name of the class : <<code | var z = new goog.ui.Zippy();>> >>
<<div class="twocol2"|
Constructors have type <<code language="ocaml" | val className : args -> .. -> className Js.t constr>>
Modules defining objects are ##include##d in the parent package, so you have directly access to the constructors from the parent package:
<<code language="ocaml" | let z = jsnew Goog.Ui.zippy()>> >>

== Modules list ==

%}

{!modules:
Goog
Goog.Tools
Goog.Disposable
Goog.Math
Goog.Async
Goog.Date
Goog.Events
Goog.Fx
Goog.Gdom
Goog.Geditor
Goog.Ggraphics
Goog.I18n
Goog.Positioning
Goog.Spell
Goog.Structs
Goog.Timer
Goog.Ui
Goog.UserAgent
}